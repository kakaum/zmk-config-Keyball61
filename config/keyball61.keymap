#define DEFAULT 0
#define SYM     1
#define FUN     2
#define MOUSE   3
#define SCROLL  4
#define SNIPE   5

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        mb1 {
            bindings = <&mkp MB1>;
            key-positions = <45 46>;
        };

        dragscroll {
            bindings = <&mo 5>;
            key-positions = <46 47>;
        };

        mb2 {
            bindings = <&mkp RCLK>;
            key-positions = <47 48>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp GRAVE         &kp N1        &kp N2            &kp N3  &kp N4  &kp N5                                                 &kp N6     &kp N7  &kp N8     &kp N9   &kp N0         &kp BSPC
&kp TAB           &kp Q         &kp W             &kp E   &kp R   &kp T                                                  &kp Y      &kp U   &kp I      &kp O    &kp P          &kp BACKSLASH
&kp ESC           &kp A         &kp S             &kp D   &kp F   &kp G                                                  &kp H      &kp J   &kp K      &kp L    &kp SEMI       &kp SQT
&kp LEFT_SHIFT    &kp Z         &kp X             &kp C   &kp V   &kp B             &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp N      &kp M   &kp COMMA  &kp DOT  &kp FSLH       &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &mo 6   &mo 5   &mt LEFT_GUI RET  &mo 1             &mo 2              &kp SPACE                              &kp RIGHT_ALT  &kp RIGHT_CONTROL
            >;
        };

        lower_layer {
            bindings = <
&none                  &none              &none           &none           &none            &none                   &trans         &trans        &trans        &trans        &trans  &kp DELETE
&trans                 &trans             &trans          &mmv MOVE_UP    &trans           &trans                  &kp LS(EQUAL)  &kp N7        &kp N8        &kp N9        &trans  &kp MINUS
&kp LC(LA(LG(SPACE)))  &kp LC(LA(LG(A)))  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans                  &kp EQUAL      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &trans
&trans                 &kp LC(LA(LG(Z)))  &mkp MCLK       &mkp LCLK       &mkp RCLK        &trans  &trans  &trans  &kp LS(MINUS)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &kp RETURN
&trans                 &trans             &trans          &trans          &trans           &trans  &trans  &trans  &kp N0                                                   &trans  &trans
            >;

            label = "Lower";
        };

        upper_layer {
            label = "Upper";
            bindings = <
&trans          &trans  &kp F10  &kp F11  &kp F12  &trans                  &kp LS(LG(NUMBER_4))  &trans                  &trans                   &trans               &trans  &kp DELETE
&kp LC(LG(N0))  &trans  &kp F7   &kp F8   &kp F9   &trans                  &kp HOME              &kp LG(LS(LEFT_BRACE))  &kp LG(LS(RIGHT_BRACE))  &kp END              &trans  &trans
&trans          &trans  &kp F4   &kp F5   &kp F6   &trans                  &kp LEFT_ARROW        &kp DOWN_ARROW          &kp UP_ARROW             &kp RIGHT_ARROW      &trans  &trans
&trans          &trans  &kp F1   &kp F2   &kp F3   &trans  &trans  &trans  &kp LG(LEFT_BRACE)    &kp PAGE_DOWN           &kp PAGE_UP              &kp LG(RIGHT_BRACE)  &trans  &trans
&trans          &trans  &trans   &trans   &trans   &trans  &trans  &trans  &trans                                                                                      &trans  &trans
            >;
        };

        adjust_layer {
            label = "Adjust";
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1           &bt BT_SEL 2               &bt BT_SEL 3  &trans                                 &trans  &trans                   &trans                      &trans  &trans                         &bt BT_CLR
&trans  &trans        &trans                 &trans                     &trans        &kp LS(LA(LC(LG(T))))                  &trans  &kp LS(LA(K_VOLUME_UP))  &kp LS(LA(LC(LG(INSERT))))  &trans  &kp K_PLAY_PAUSE               &trans
&trans  &trans        &kp LS(LA(LC(LG(S))))  &kp LS(LA(K_VOLUME_DOWN))  &trans        &trans                                 &trans  &kp LS(LA(LC(LG(J))))    &trans                      &trans  &kp LS(LA(LC(LG(SEMICOLON))))  &kp LS(LA(LC(LG(SINGLE_QUOTE))))
&trans  &trans        &trans                 &kp LS(LC(LA(LG(C))))      &trans        &trans                 &trans  &trans  &trans  &trans                   &trans                      &trans  &trans                         &trans
&trans  &trans        &trans                 &trans                     &trans        &trans                 &trans  &trans  &trans                                                               &trans                         &trans
            >;
        };

        mouse_layer {
            label = "Mouse";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans
            >;
        };

        scroll_layer {
            label = "Scroll";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans                &trans                  &trans                   &trans                 &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp HOME              &kp LG(LS(LEFT_BRACE))  &kp LS(LG(RIGHT_BRACE))  &kp END                &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp LEFT_ARROW        &kp DOWN_ARROW          &kp UP_ARROW             &kp RIGHT_ARROW        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LG(LEFT_BRACKET)  &kp PAGE_DOWN           &kp PAGE_UP              &kp LG(RIGHT_BRACKET)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                                                                                        &trans  &trans
            >;
        };

        snipe_layer {
            label = "Snipe";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Tri_lowerupperadjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
